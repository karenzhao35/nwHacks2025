"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const ddbClient = new client_dynamodb_1.DynamoDBClient({ region: "us-west-2" });
const ACCOUNT_TABLE_NAME = "account-table";
exports.handler = async (event, _) => {
    try {
        if (!event.body) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "Invalid request: no body provided" }),
            };
        }
        const { accountId, friendId } = JSON.parse(event.body);
        if (!accountId || !friendId) {
            return {
                statusCode: 400,
                body: JSON.stringify({
                    message: "accountId and friendId are required",
                }),
            };
        }
        const params = {
            TableName: ACCOUNT_TABLE_NAME,
            Key: {
                id: { S: accountId },
            },
            UpdateExpression: "SET #friends = list_append(if_not_exists(#friends, :emptyList), :friendVal)",
            ExpressionAttributeNames: {
                "#friends": "friends",
            },
            ExpressionAttributeValues: {
                ":friendVal": { L: [{ S: friendId }] },
                ":emptyList": { L: [] },
            },
            ReturnValues: "UPDATED_NEW",
        };
        const result = await ddbClient.send(new client_dynamodb_1.UpdateItemCommand(params));
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Friend added", result }),
        };
    }
    catch (err) {
        console.error("Error adding friend:", err);
        return {
            statusCode: 500,
            body: JSON.stringify({ message: "Failed to add friend", error: err }),
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkLWZyaWVuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGQtZnJpZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDhEQUlrQztBQUVsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUM5RCxNQUFNLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztBQUU5QixRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBc0IsRUFBRSxDQUFVLEVBQUUsRUFBRTtJQUNsRSxJQUFJO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDZixPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLENBQUM7YUFDdkUsQ0FBQztTQUNIO1FBRUQsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV2RCxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQzNCLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ25CLE9BQU8sRUFBRSxxQ0FBcUM7aUJBQy9DLENBQUM7YUFDSCxDQUFDO1NBQ0g7UUFFRCxNQUFNLE1BQU0sR0FBMkI7WUFDckMsU0FBUyxFQUFFLGtCQUFrQjtZQUM3QixHQUFHLEVBQUU7Z0JBQ0gsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTthQUNyQjtZQUNELGdCQUFnQixFQUFFLDZFQUE2RTtZQUMvRix3QkFBd0IsRUFBRTtnQkFDeEIsVUFBVSxFQUFFLFNBQVM7YUFDdEI7WUFDRCx5QkFBeUIsRUFBRTtnQkFDekIsWUFBWSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRTtnQkFDdEMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRTthQUN4QjtZQUNELFlBQVksRUFBRSxhQUFhO1NBQzVCLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxtQ0FBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRW5FLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsQ0FBQztTQUMxRCxDQUFDO0tBQ0g7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0MsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO1NBQ3RFLENBQUM7S0FDSDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlFdmVudCwgQ29udGV4dCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XHJcbmltcG9ydCB7XHJcbiAgRHluYW1vREJDbGllbnQsXHJcbiAgVXBkYXRlSXRlbUNvbW1hbmQsXHJcbiAgVXBkYXRlSXRlbUNvbW1hbmRJbnB1dCxcclxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XHJcblxyXG5jb25zdCBkZGJDbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoeyByZWdpb246IFwidXMtd2VzdC0yXCIgfSk7XHJcbmNvbnN0IEFDQ09VTlRfVEFCTEVfTkFNRSA9IFwiYWNjb3VudC10YWJsZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFQSUdhdGV3YXlFdmVudCwgXzogQ29udGV4dCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAoIWV2ZW50LmJvZHkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIkludmFsaWQgcmVxdWVzdDogbm8gYm9keSBwcm92aWRlZFwiIH0pLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgYWNjb3VudElkLCBmcmllbmRJZCB9ID0gSlNPTi5wYXJzZShldmVudC5ib2R5KTtcclxuXHJcbiAgICBpZiAoIWFjY291bnRJZCB8fCAhZnJpZW5kSWQpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgbWVzc2FnZTogXCJhY2NvdW50SWQgYW5kIGZyaWVuZElkIGFyZSByZXF1aXJlZFwiLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBhcmFtczogVXBkYXRlSXRlbUNvbW1hbmRJbnB1dCA9IHtcclxuICAgICAgVGFibGVOYW1lOiBBQ0NPVU5UX1RBQkxFX05BTUUsXHJcbiAgICAgIEtleToge1xyXG4gICAgICAgIGlkOiB7IFM6IGFjY291bnRJZCB9LFxyXG4gICAgICB9LFxyXG4gICAgICBVcGRhdGVFeHByZXNzaW9uOiBcIlNFVCAjZnJpZW5kcyA9IGxpc3RfYXBwZW5kKGlmX25vdF9leGlzdHMoI2ZyaWVuZHMsIDplbXB0eUxpc3QpLCA6ZnJpZW5kVmFsKVwiLFxyXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHtcclxuICAgICAgICBcIiNmcmllbmRzXCI6IFwiZnJpZW5kc1wiLFxyXG4gICAgICB9LFxyXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XHJcbiAgICAgICAgXCI6ZnJpZW5kVmFsXCI6IHsgTDogW3sgUzogZnJpZW5kSWQgfV0gfSxcclxuICAgICAgICBcIjplbXB0eUxpc3RcIjogeyBMOiBbXSB9LFxyXG4gICAgICB9LFxyXG4gICAgICBSZXR1cm5WYWx1ZXM6IFwiVVBEQVRFRF9ORVdcIixcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGRiQ2xpZW50LnNlbmQobmV3IFVwZGF0ZUl0ZW1Db21tYW5kKHBhcmFtcykpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIkZyaWVuZCBhZGRlZFwiLCByZXN1bHQgfSksXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFkZGluZyBmcmllbmQ6XCIsIGVycik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJGYWlsZWQgdG8gYWRkIGZyaWVuZFwiLCBlcnJvcjogZXJyIH0pLFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcbiJdfQ==