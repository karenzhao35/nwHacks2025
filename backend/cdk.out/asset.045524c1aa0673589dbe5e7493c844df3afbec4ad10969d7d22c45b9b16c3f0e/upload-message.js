"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const uuid_1 = require("uuid");
const s3 = new client_s3_1.S3Client({ region: "us-west-2" });
const ddb = new client_dynamodb_1.DynamoDBClient({ region: "us-west-2" });
// Update with your bucket and table as needed
const BUCKET_NAME = "memories-images-495599764132";
const MESSAGE_TABLE_NAME = "message-table";
exports.handler = async (event, _) => {
    try {
        if (!event.body) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "No request body provided" }),
            };
        }
        const { sender_id, recipient_id, message, imageBase64, date, category } = JSON.parse(event.body);
        if (!sender_id || !recipient_id || !message || !imageBase64 || !date || !category) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "Missing required fields" }),
            };
        }
        // Generate a unique S3 object key
        const imageKey = `images/${uuid_1.v4()}.jpg`;
        const imageBuffer = Buffer.from(imageBase64, "base64");
        // Upload the image to S3
        await s3.send(new client_s3_1.PutObjectCommand({
            Bucket: BUCKET_NAME,
            Key: imageKey,
            Body: imageBuffer,
            ContentType: "image/jpeg",
        }));
        // Construct the public S3 URL (if your bucket is publicly accessible or uses presigned URLs)
        const imageUrl = `https://${BUCKET_NAME}.s3.amazonaws.com/${imageKey}`;
        // Store message metadata (including image URL) in DynamoDB
        await ddb.send(new client_dynamodb_1.PutItemCommand({
            TableName: MESSAGE_TABLE_NAME,
            Item: {
                sender_id: { S: sender_id },
                recipient_id: { S: recipient_id },
                message: { S: message },
                s3_image: { S: imageUrl },
                date: { S: date },
                category: { S: category },
            },
        }));
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Message and image stored successfully" }),
        };
    }
    catch (error) {
        return {
            statusCode: 500,
            body: JSON.stringify({ message: "Failed to store message", error }),
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLW1lc3NhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBsb2FkLW1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esa0RBQWdFO0FBQ2hFLDhEQUEwRTtBQUMxRSwrQkFBb0M7QUFFcEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxvQkFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDakQsTUFBTSxHQUFHLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFFeEQsOENBQThDO0FBQzlDLE1BQU0sV0FBVyxHQUFHLDhCQUE4QixDQUFDO0FBQ25ELE1BQU0sa0JBQWtCLEdBQUcsZUFBZSxDQUFDO0FBRTlCLFFBQUEsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFzQixFQUFFLENBQVUsRUFBRSxFQUFFO0lBQ2xFLElBQUk7UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNmLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQzthQUM5RCxDQUFDO1NBQ0g7UUFFRCxNQUFNLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqRyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pGLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQzthQUM3RCxDQUFDO1NBQ0g7UUFFRCxrQ0FBa0M7UUFDbEMsTUFBTSxRQUFRLEdBQUcsVUFBVSxTQUFNLEVBQUUsTUFBTSxDQUFDO1FBQzFDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXZELHlCQUF5QjtRQUN6QixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQ1gsSUFBSSw0QkFBZ0IsQ0FBQztZQUNuQixNQUFNLEVBQUUsV0FBVztZQUNuQixHQUFHLEVBQUUsUUFBUTtZQUNiLElBQUksRUFBRSxXQUFXO1lBQ2pCLFdBQVcsRUFBRSxZQUFZO1NBQzFCLENBQUMsQ0FDSCxDQUFDO1FBRUYsNkZBQTZGO1FBQzdGLE1BQU0sUUFBUSxHQUFHLFdBQVcsV0FBVyxxQkFBcUIsUUFBUSxFQUFFLENBQUM7UUFFdkUsMkRBQTJEO1FBQzNELE1BQU0sR0FBRyxDQUFDLElBQUksQ0FDWixJQUFJLGdDQUFjLENBQUM7WUFDakIsU0FBUyxFQUFFLGtCQUFrQjtZQUM3QixJQUFJLEVBQUU7Z0JBQ0osU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRTtnQkFDM0IsWUFBWSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRTtnQkFDakMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRTtnQkFDdkIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRTtnQkFDekIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRTtnQkFDakIsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRTthQUMxQjtTQUNGLENBQUMsQ0FDSCxDQUFDO1FBRUYsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsdUNBQXVDLEVBQUUsQ0FBQztTQUMzRSxDQUFDO0tBQ0g7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLEtBQUssRUFBRSxDQUFDO1NBQ3BFLENBQUM7S0FDSDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlFdmVudCwgQ29udGV4dCB9IGZyb20gXCJhd3MtbGFtYmRhXCI7XHJcbmltcG9ydCB7IFMzQ2xpZW50LCBQdXRPYmplY3RDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zM1wiO1xyXG5pbXBvcnQgeyBEeW5hbW9EQkNsaWVudCwgUHV0SXRlbUNvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XHJcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XHJcblxyXG5jb25zdCBzMyA9IG5ldyBTM0NsaWVudCh7IHJlZ2lvbjogXCJ1cy13ZXN0LTJcIiB9KTtcclxuY29uc3QgZGRiID0gbmV3IER5bmFtb0RCQ2xpZW50KHsgcmVnaW9uOiBcInVzLXdlc3QtMlwiIH0pO1xyXG5cclxuLy8gVXBkYXRlIHdpdGggeW91ciBidWNrZXQgYW5kIHRhYmxlIGFzIG5lZWRlZFxyXG5jb25zdCBCVUNLRVRfTkFNRSA9IFwibWVtb3JpZXMtaW1hZ2VzLTQ5NTU5OTc2NDEzMlwiO1xyXG5jb25zdCBNRVNTQUdFX1RBQkxFX05BTUUgPSBcIm1lc3NhZ2UtdGFibGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBBUElHYXRld2F5RXZlbnQsIF86IENvbnRleHQpID0+IHtcclxuICB0cnkge1xyXG4gICAgaWYgKCFldmVudC5ib2R5KSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJObyByZXF1ZXN0IGJvZHkgcHJvdmlkZWRcIiB9KSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHNlbmRlcl9pZCwgcmVjaXBpZW50X2lkLCBtZXNzYWdlLCBpbWFnZUJhc2U2NCwgZGF0ZSwgY2F0ZWdvcnkgfSA9IEpTT04ucGFyc2UoZXZlbnQuYm9keSk7XHJcblxyXG4gICAgaWYgKCFzZW5kZXJfaWQgfHwgIXJlY2lwaWVudF9pZCB8fCAhbWVzc2FnZSB8fCAhaW1hZ2VCYXNlNjQgfHwgIWRhdGUgfHwgIWNhdGVnb3J5KSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkc1wiIH0pLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEdlbmVyYXRlIGEgdW5pcXVlIFMzIG9iamVjdCBrZXlcclxuICAgIGNvbnN0IGltYWdlS2V5ID0gYGltYWdlcy8ke3V1aWR2NCgpfS5qcGdgO1xyXG4gICAgY29uc3QgaW1hZ2VCdWZmZXIgPSBCdWZmZXIuZnJvbShpbWFnZUJhc2U2NCwgXCJiYXNlNjRcIik7XHJcblxyXG4gICAgLy8gVXBsb2FkIHRoZSBpbWFnZSB0byBTM1xyXG4gICAgYXdhaXQgczMuc2VuZChcclxuICAgICAgbmV3IFB1dE9iamVjdENvbW1hbmQoe1xyXG4gICAgICAgIEJ1Y2tldDogQlVDS0VUX05BTUUsXHJcbiAgICAgICAgS2V5OiBpbWFnZUtleSxcclxuICAgICAgICBCb2R5OiBpbWFnZUJ1ZmZlcixcclxuICAgICAgICBDb250ZW50VHlwZTogXCJpbWFnZS9qcGVnXCIsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIC8vIENvbnN0cnVjdCB0aGUgcHVibGljIFMzIFVSTCAoaWYgeW91ciBidWNrZXQgaXMgcHVibGljbHkgYWNjZXNzaWJsZSBvciB1c2VzIHByZXNpZ25lZCBVUkxzKVxyXG4gICAgY29uc3QgaW1hZ2VVcmwgPSBgaHR0cHM6Ly8ke0JVQ0tFVF9OQU1FfS5zMy5hbWF6b25hd3MuY29tLyR7aW1hZ2VLZXl9YDtcclxuXHJcbiAgICAvLyBTdG9yZSBtZXNzYWdlIG1ldGFkYXRhIChpbmNsdWRpbmcgaW1hZ2UgVVJMKSBpbiBEeW5hbW9EQlxyXG4gICAgYXdhaXQgZGRiLnNlbmQoXHJcbiAgICAgIG5ldyBQdXRJdGVtQ29tbWFuZCh7XHJcbiAgICAgICAgVGFibGVOYW1lOiBNRVNTQUdFX1RBQkxFX05BTUUsXHJcbiAgICAgICAgSXRlbToge1xyXG4gICAgICAgICAgc2VuZGVyX2lkOiB7IFM6IHNlbmRlcl9pZCB9LFxyXG4gICAgICAgICAgcmVjaXBpZW50X2lkOiB7IFM6IHJlY2lwaWVudF9pZCB9LFxyXG4gICAgICAgICAgbWVzc2FnZTogeyBTOiBtZXNzYWdlIH0sXHJcbiAgICAgICAgICBzM19pbWFnZTogeyBTOiBpbWFnZVVybCB9LFxyXG4gICAgICAgICAgZGF0ZTogeyBTOiBkYXRlIH0sXHJcbiAgICAgICAgICBjYXRlZ29yeTogeyBTOiBjYXRlZ29yeSB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIk1lc3NhZ2UgYW5kIGltYWdlIHN0b3JlZCBzdWNjZXNzZnVsbHlcIiB9KSxcclxuICAgIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIkZhaWxlZCB0byBzdG9yZSBtZXNzYWdlXCIsIGVycm9yIH0pLFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcbiJdfQ==