"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const uuid_1 = require("uuid");
const s3 = new client_s3_1.S3Client({ region: "us-west-2" });
const ddb = new client_dynamodb_1.DynamoDBClient({ region: "us-west-2" });
const BUCKET_NAME = "memories-images-495599764132";
const MESSAGE_TABLE_NAME = "message-table";
exports.handler = async (event, _) => {
    try {
        if (!event.body) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "No request body provided" }),
            };
        }
        const { sender_id, recipient_id, message, imageBase64, date, category } = JSON.parse(event.body);
        if (!sender_id || !recipient_id || !message || !imageBase64 || !date || !category) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "Missing required fields" }),
            };
        }
        const imageKey = `images/${uuid_1.v4()}.jpg`;
        const imageBuffer = Buffer.from(imageBase64, "base64");
        await s3.send(new client_s3_1.PutObjectCommand({
            Bucket: BUCKET_NAME,
            Key: imageKey,
            Body: imageBuffer,
            ContentType: "image/jpeg",
        }));
        const imageUrl = `https://${BUCKET_NAME}.s3.amazonaws.com/${imageKey}`;
        await ddb.send(new client_dynamodb_1.PutItemCommand({
            TableName: MESSAGE_TABLE_NAME,
            Item: {
                sender_id: { S: sender_id },
                recipient_id: { S: recipient_id },
                message: { S: message },
                s3_image: { S: imageUrl },
                date: { S: date },
                category: { S: category },
            },
        }));
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "Message and image stored successfully" }),
        };
    }
    catch (error) {
        return {
            statusCode: 500,
            body: JSON.stringify({ message: "Failed to store message", error }),
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLW1lc3NhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXBsb2FkLW1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esa0RBQWdFO0FBQ2hFLDhEQUEwRTtBQUMxRSwrQkFBb0M7QUFFcEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxvQkFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDakQsTUFBTSxHQUFHLEdBQUcsSUFBSSxnQ0FBYyxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFFeEQsTUFBTSxXQUFXLEdBQUcsOEJBQThCLENBQUM7QUFFbkQsTUFBTSxrQkFBa0IsR0FBRyxlQUFlLENBQUM7QUFFOUIsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQXNCLEVBQUUsQ0FBVSxFQUFFLEVBQUU7SUFDbEUsSUFBSTtRQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFO1lBQ2YsT0FBTztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxDQUFDO2FBQzlELENBQUM7U0FDSDtRQUVELE1BQU0sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakYsT0FBTztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxDQUFDO2FBQzdELENBQUM7U0FDSDtRQUVELE1BQU0sUUFBUSxHQUFHLFVBQVUsU0FBTSxFQUFFLE1BQU0sQ0FBQztRQUMxQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV2RCxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQ1gsSUFBSSw0QkFBZ0IsQ0FBQztZQUNuQixNQUFNLEVBQUUsV0FBVztZQUNuQixHQUFHLEVBQUUsUUFBUTtZQUNiLElBQUksRUFBRSxXQUFXO1lBQ2pCLFdBQVcsRUFBRSxZQUFZO1NBQzFCLENBQUMsQ0FDSCxDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsV0FBVyxXQUFXLHFCQUFxQixRQUFRLEVBQUUsQ0FBQztRQUV2RSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQ1osSUFBSSxnQ0FBYyxDQUFDO1lBQ2pCLFNBQVMsRUFBRSxrQkFBa0I7WUFDN0IsSUFBSSxFQUFFO2dCQUNKLFNBQVMsRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7Z0JBQzNCLFlBQVksRUFBRSxFQUFFLENBQUMsRUFBRSxZQUFZLEVBQUU7Z0JBQ2pDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUU7Z0JBQ3ZCLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUU7Z0JBQ3pCLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUU7Z0JBQ2pCLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUU7YUFDMUI7U0FDRixDQUFDLENBQ0gsQ0FBQztRQUVGLE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLENBQUM7U0FDM0UsQ0FBQztLQUNIO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxLQUFLLEVBQUUsQ0FBQztTQUNwRSxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5RXZlbnQsIENvbnRleHQgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xyXG5pbXBvcnQgeyBTM0NsaWVudCwgUHV0T2JqZWN0Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtczNcIjtcclxuaW1wb3J0IHsgRHluYW1vREJDbGllbnQsIFB1dEl0ZW1Db21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xyXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiO1xyXG5cclxuY29uc3QgczMgPSBuZXcgUzNDbGllbnQoeyByZWdpb246IFwidXMtd2VzdC0yXCIgfSk7XHJcbmNvbnN0IGRkYiA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbjogXCJ1cy13ZXN0LTJcIiB9KTtcclxuXHJcbmNvbnN0IEJVQ0tFVF9OQU1FID0gXCJtZW1vcmllcy1pbWFnZXMtNDk1NTk5NzY0MTMyXCI7IFxyXG5cclxuY29uc3QgTUVTU0FHRV9UQUJMRV9OQU1FID0gXCJtZXNzYWdlLXRhYmxlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheUV2ZW50LCBfOiBDb250ZXh0KSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmICghZXZlbnQuYm9keSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiTm8gcmVxdWVzdCBib2R5IHByb3ZpZGVkXCIgfSksXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyBzZW5kZXJfaWQsIHJlY2lwaWVudF9pZCwgbWVzc2FnZSwgaW1hZ2VCYXNlNjQsIGRhdGUsIGNhdGVnb3J5IH0gPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xyXG4gICAgaWYgKCFzZW5kZXJfaWQgfHwgIXJlY2lwaWVudF9pZCB8fCAhbWVzc2FnZSB8fCAhaW1hZ2VCYXNlNjQgfHwgIWRhdGUgfHwgIWNhdGVnb3J5KSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkc1wiIH0pLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGltYWdlS2V5ID0gYGltYWdlcy8ke3V1aWR2NCgpfS5qcGdgO1xyXG4gICAgY29uc3QgaW1hZ2VCdWZmZXIgPSBCdWZmZXIuZnJvbShpbWFnZUJhc2U2NCwgXCJiYXNlNjRcIik7XHJcblxyXG4gICAgYXdhaXQgczMuc2VuZChcclxuICAgICAgbmV3IFB1dE9iamVjdENvbW1hbmQoe1xyXG4gICAgICAgIEJ1Y2tldDogQlVDS0VUX05BTUUsXHJcbiAgICAgICAgS2V5OiBpbWFnZUtleSxcclxuICAgICAgICBCb2R5OiBpbWFnZUJ1ZmZlcixcclxuICAgICAgICBDb250ZW50VHlwZTogXCJpbWFnZS9qcGVnXCIsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGltYWdlVXJsID0gYGh0dHBzOi8vJHtCVUNLRVRfTkFNRX0uczMuYW1hem9uYXdzLmNvbS8ke2ltYWdlS2V5fWA7XHJcblxyXG4gICAgYXdhaXQgZGRiLnNlbmQoXHJcbiAgICAgIG5ldyBQdXRJdGVtQ29tbWFuZCh7XHJcbiAgICAgICAgVGFibGVOYW1lOiBNRVNTQUdFX1RBQkxFX05BTUUsXHJcbiAgICAgICAgSXRlbToge1xyXG4gICAgICAgICAgc2VuZGVyX2lkOiB7IFM6IHNlbmRlcl9pZCB9LFxyXG4gICAgICAgICAgcmVjaXBpZW50X2lkOiB7IFM6IHJlY2lwaWVudF9pZCB9LFxyXG4gICAgICAgICAgbWVzc2FnZTogeyBTOiBtZXNzYWdlIH0sXHJcbiAgICAgICAgICBzM19pbWFnZTogeyBTOiBpbWFnZVVybCB9LFxyXG4gICAgICAgICAgZGF0ZTogeyBTOiBkYXRlIH0sXHJcbiAgICAgICAgICBjYXRlZ29yeTogeyBTOiBjYXRlZ29yeSB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIk1lc3NhZ2UgYW5kIGltYWdlIHN0b3JlZCBzdWNjZXNzZnVsbHlcIiB9KSxcclxuICAgIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDUwMCxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIkZhaWxlZCB0byBzdG9yZSBtZXNzYWdlXCIsIGVycm9yIH0pLFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcbiJdfQ==