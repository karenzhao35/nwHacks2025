"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const ddbClient = new client_dynamodb_1.DynamoDBClient({ region: "us-west-2" });
const ACCOUNT_TABLE_NAME = "account-table";
exports.handler = async (event, _) => {
    var _a, _b;
    try {
        const { accountId } = event.queryStringParameters || {};
        if (!accountId) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "accountId is required" }),
            };
        }
        const params = {
            TableName: ACCOUNT_TABLE_NAME,
            Key: {
                id: { S: accountId },
            },
        };
        const result = await ddbClient.send(new client_dynamodb_1.GetItemCommand(params));
        const item = result.Item
            ? {
                id: result.Item.id.S,
                friends: ((_b = (_a = result.Item.friends) === null || _a === void 0 ? void 0 : _a.L) === null || _b === void 0 ? void 0 : _b.map((f) => f.S)) || [],
            }
            : null;
        return {
            statusCode: 200,
            body: JSON.stringify({
                message: "Friends list fetched successfully",
                account: item,
            }),
        };
    }
    catch (err) {
        console.error("Error retrieving friend list:", err);
        return {
            statusCode: 500,
            body: JSON.stringify({ message: "Failed to get friend list", error: err }),
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZyaWVuZHMtbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZXQtZnJpZW5kcy1saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDhEQUlrQztBQUVsQyxNQUFNLFNBQVMsR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUM5RCxNQUFNLGtCQUFrQixHQUFHLGVBQWUsQ0FBQztBQUU5QixRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBc0IsRUFBRSxDQUFVLEVBQUUsRUFBRTs7SUFDbEUsSUFBSTtRQUVGLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUMscUJBQXFCLElBQUksRUFBRSxDQUFDO1FBRXhELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPO2dCQUNMLFVBQVUsRUFBRSxHQUFHO2dCQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLENBQUM7YUFDM0QsQ0FBQztTQUNIO1FBRUQsTUFBTSxNQUFNLEdBQXdCO1lBQ2xDLFNBQVMsRUFBRSxrQkFBa0I7WUFDN0IsR0FBRyxFQUFFO2dCQUNILEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7YUFDckI7U0FDRixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksZ0NBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRWhFLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJO1lBQ3RCLENBQUMsQ0FBQztnQkFDRSxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDcEIsT0FBTyxFQUFFLGFBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLDBDQUFFLENBQUMsMENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFLLEVBQUU7YUFDdkQ7WUFDSCxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRVQsT0FBTztZQUNMLFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ25CLE9BQU8sRUFBRSxtQ0FBbUM7Z0JBQzVDLE9BQU8sRUFBRSxJQUFJO2FBQ2QsQ0FBQztTQUNILENBQUM7S0FDSDtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNwRCxPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7U0FDM0UsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheUV2ZW50LCBDb250ZXh0IH0gZnJvbSBcImF3cy1sYW1iZGFcIjtcclxuaW1wb3J0IHtcclxuICBEeW5hbW9EQkNsaWVudCxcclxuICBHZXRJdGVtQ29tbWFuZCxcclxuICBHZXRJdGVtQ29tbWFuZElucHV0LFxyXG59IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIjtcclxuXHJcbmNvbnN0IGRkYkNsaWVudCA9IG5ldyBEeW5hbW9EQkNsaWVudCh7IHJlZ2lvbjogXCJ1cy13ZXN0LTJcIiB9KTtcclxuY29uc3QgQUNDT1VOVF9UQUJMRV9OQU1FID0gXCJhY2NvdW50LXRhYmxlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogQVBJR2F0ZXdheUV2ZW50LCBfOiBDb250ZXh0KSA9PiB7XHJcbiAgdHJ5IHtcclxuXHJcbiAgICBjb25zdCB7IGFjY291bnRJZCB9ID0gZXZlbnQucXVlcnlTdHJpbmdQYXJhbWV0ZXJzIHx8IHt9O1xyXG5cclxuICAgIGlmICghYWNjb3VudElkKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJhY2NvdW50SWQgaXMgcmVxdWlyZWRcIiB9KSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYXJhbXM6IEdldEl0ZW1Db21tYW5kSW5wdXQgPSB7XHJcbiAgICAgIFRhYmxlTmFtZTogQUNDT1VOVF9UQUJMRV9OQU1FLFxyXG4gICAgICBLZXk6IHtcclxuICAgICAgICBpZDogeyBTOiBhY2NvdW50SWQgfSxcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGRiQ2xpZW50LnNlbmQobmV3IEdldEl0ZW1Db21tYW5kKHBhcmFtcykpO1xyXG5cclxuICAgIGNvbnN0IGl0ZW0gPSByZXN1bHQuSXRlbVxyXG4gICAgICA/IHtcclxuICAgICAgICAgIGlkOiByZXN1bHQuSXRlbS5pZC5TLFxyXG4gICAgICAgICAgZnJpZW5kczogcmVzdWx0Lkl0ZW0uZnJpZW5kcz8uTD8ubWFwKChmKSA9PiBmLlMpIHx8IFtdLFxyXG4gICAgICAgIH1cclxuICAgICAgOiBudWxsO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIG1lc3NhZ2U6IFwiRnJpZW5kcyBsaXN0IGZldGNoZWQgc3VjY2Vzc2Z1bGx5XCIsXHJcbiAgICAgICAgYWNjb3VudDogaXRlbSxcclxuICAgICAgfSksXHJcbiAgICB9O1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHJldHJpZXZpbmcgZnJpZW5kIGxpc3Q6XCIsIGVycik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJGYWlsZWQgdG8gZ2V0IGZyaWVuZCBsaXN0XCIsIGVycm9yOiBlcnIgfSksXHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuIl19